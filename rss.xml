<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BITSON's Blog</title><link>http://blog.bitson.com.ar/</link><description>Nuestro Blog...</description><atom:link href="http://blog.bitson.com.ar/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2018 &lt;a href="mailto:info@bitson.com.ar"&gt;Cooperativa de Trabajo BITSON Ltda.&lt;/a&gt; </copyright><lastBuildDate>Fri, 02 Mar 2018 19:05:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Empezando a usar Google AdWords</title><link>http://blog.bitson.com.ar/posts/empezando-a-usar-google-adwords/</link><dc:creator>@nespino</dc:creator><description>&lt;div&gt;&lt;p&gt;El día de hoy vamos a ver cómo empezar a usar &lt;a href="https://adwords.google.com/" title="Google AdWords"&gt;Google AdWords&lt;/a&gt;, aprovechando los descuentos que ofrecen y andan dando vueltas. En caso de no haber recibido uno, podés ponerte en contacto y hacer ruido de que tenés una empresa o un dominio o aparición en internet y te lo envían.&lt;/p&gt;
&lt;p&gt;Para empezar, les dejo el número de teléfono gratuito para asistencia a cuentas con inversiones de bajo monto (al día del a fecha, inversiones menores a $2500 ARS mensuales): &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0800-222-4664&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Si la inversión supera ese monto, el número entonces será:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0800-666-1866 ó 0800-666-0668&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;A continuación, el tutorial empleará el signo $ para referirse a ARS (Pesos Argentinos)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Empezando a usar Google AdWords&lt;/h3&gt;
&lt;p&gt;Nos llegó por correo tradicional a las oficinas de Bitson, un código que otorgaba $700 de crédito en Adwords, con el único requisito de hacer un pago previo de $300. Pero como estábamos de suerte, también le llegó otro a @lecovi, donde el monto para el mismo requisito era de $175. Se pueden imaginar cuál de los dos usamos, de todas formas el camino a recorrer es exactamente igual.&lt;/p&gt;
&lt;p&gt;El código:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AHT9T-KURGR-A9MP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Las condiciones detalladas:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Activar o reactivar una cuenta en Google AdWords&lt;/li&gt;
&lt;li&gt;Antes de los 14 días de dicha activación, ingresar el código en el &lt;a href="https://adwords.google.com/aw/promotions" title="Ingresar cupones de descuento"&gt;apartado correspondiente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Usar $175 en publicidad&lt;/li&gt;
&lt;li&gt;Abonar esos $175 a través de Banelco, PagoMisCuentas, tarjeta de débito o crédito (&lt;a href="https://billing.google.com/payments/u/0/paymentsinfofinder" title="Información de &amp;gt;pago"&gt;https://billing.google.com/payments/u/0/paymentsinfofinder&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Esperar 5 días hábiles hasta que se acredite el beneficio, del cual cabe destacar, que el sistema no dará aviso.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;AdWords tampoco emitirá ninguna clase de aviso cuando se acabe el crédito promocional, es necesario revisar periódicamente la cuenta para no generar deudas indeseables.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;También es posible que ingresemos a un nuevo programa llamado AdWords Express. Tiene las mismas funciones y costos que AdWords tradicional, pero la interfaz gráfica es muchísimo más sencilla. ¡Altamente recomendado para principiantes!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Configuración de la primer campaña en Google AdWords Express&lt;/h3&gt;
&lt;p&gt;Estos son los datos que nos fueron requeridos. Es bastante intuitivo, y algunos no requieren explicación adicional...&lt;/p&gt;
&lt;p&gt;Sitio a difundir: &lt;br&gt;
(La &lt;a href="https://es.wikipedia.org/wiki/Localizador_de_recursos_uniforme" title="Significado de URL..."&gt;URL&lt;/a&gt; del sitio que queremos promocionar) &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://bitson.group/cursos/" title="Cursos de bitson"&gt;https://bitson.group/cursos/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Objetivo: &lt;br&gt;
(Qué es lo que esperamos que pase en nuestro sitio)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Acción en el sitio web (registro en el formulario)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Radio de acción:&lt;br&gt;
(¿Dónde queremos que se muestre nuestro anuncio?)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mostrar el anuncio en un radio de 15km desde la empresa&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para esto, se puede definir una dirección específica o vincular directamente con &lt;a href="https://www.google.es/intl/es/business/" title="Google My Business"&gt;Google My Business&lt;/a&gt;, que tomará la dirección automáticamente.
En base a esta configuración, AdWords nos presenta la siguiente estimación:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;El tamaño de la audiencia potencial, será entonces de 18.424.498 personas por mes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto significa que se prevé que 18 millones de personas verán el anuncio. ¿Y tenemos que pagar por todo esto? Por supuesto que no, sólo pagaremos por cada click. A este costo se lo define como &lt;a href="https://support.google.com/adwords/answer/116495" title="Costo por click"&gt;CPC&lt;/a&gt; (Costo por click o Cost per click). Este valor está determinado por el ranking de nuestro anuncio y la oferta para el mismo tipo de anuncio en la misma región. En definitiva, este valor lo va a definir Google, y no podemos tomar control sobre eso, pero sí podemos limitar cuánto estamos dispuestos a pagar por ese click. En función de ese límite, se establecerá este ranking, lo que definirá en qué orden será mostrado en el navegador junto a las publicidades de la competencia. A todo este proceso complejo se lo llama subasta. Cuando muchos anunciantes compiten por la misma aparición de publicidad, AdWords seleccionará y mostrará únicamente a los anuncios de mayor ranking.&lt;/p&gt;
&lt;p&gt;En adelante, para acceder al panel de control, podemos hacerlo a través de &lt;a href="https://adwords.google.com/express/plus/" title="Panel de Control de Google AdWords Express"&gt;https://adwords.google.com/express/plus/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Definiendo el producto&lt;/h2&gt;
&lt;p&gt;Se promociona: &lt;br&gt;
(¿Qué clase de producto o servicio estamos ofreciendo?)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Curso de programación&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mostrar anuncio a personas que busquen:&lt;br&gt;
(Listado de categorías relativas a nuestro producto o servicio)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Curso de Programación&lt;/li&gt;
&lt;li&gt;Introducción a la programación web&lt;/li&gt;
&lt;li&gt;Informática y Programación&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gracias a la información brindada, Google AdWords filtrará a los destinatarios de nuestro anuncio, de manera de no desperdiciar clicks (que paguemos por aquellas personas curiosas que entran sólo para ver qué es) y para no llenar las búsquedas de Google con publicidad no relevante para quien esté navegando.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;El tamaño de la audiencia potencial, será entonces de 11.516 personas por mes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Diseño del anuncio:&lt;br&gt;
(Dentro del formato ofrecido por AdWords, contamos con 3 renglones para atraer a nuestros clientes hacia nuestro sitio)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aprendé Python en bitson - Sumate a los que saben
Anuncio bitson.group
Aprovechá el año y arrancá en Febrero! Precio promocional&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lo que nos da como resultado:&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bitson.group/cursos" title="Cursos en bitson"&gt;&lt;img alt="adwords curso bitson python" src="http://blog.bitson.com.ar/img/adwords.png" title="Anuncio de Curso de Python en bitson"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;¿Cuanto vamos a invertir?&lt;/h2&gt;
&lt;p&gt;Como primera prueba, decidimos invertir lo mínimo requerido para acceder a la asistencia telefónica, $2500 ARS mensuales. Por menos de ese valor la ayuda que recibís por teléfono es mínima, por el contrario, a partir de ese valor de inversión la asistencia es muy completa y por demás, agradable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inversión $82,24 ARS$ al día de media ($2500 al meś de máximo)
Rendimiento estimado: 996 - 1669 visualizaciones, 244 - 409 clics&lt;/p&gt;
&lt;p&gt;Cuándo pagas
Solo pagarás cuando alguien haga clic en tu anuncio o llame a tu empresa.&lt;/p&gt;
&lt;p&gt;Cuánto cuesta
Cada clic tiene un coste distinto, pero no gastarás más del presupuesto mensual que hayas establecido.&lt;/p&gt;
&lt;p&gt;Qué ocurre si cambias de idea
Prueba a publicar el anuncio sin compromiso, ya que puedes cambiar el presupuesto o cancelar su publicación en cualquier momento.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para facilitar los pagos, dejé registrada una tarjeta de crédito, de manera que los pagos se hagan en forma automática. También es posible entrar a la sección de Facturación y emitir los pagos manualmente.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Les recomendamos aumentar el seguimiento sobre nuestra publicación, conectando nuestro sitio con &lt;a href="https://www.google.com/analytics/" title="Google Analytics"&gt;Google Analytics&lt;/a&gt;, usando el tag que ofrece Adwords Express.&lt;/p&gt;
&lt;h2&gt;¿Cómo hacer para recibir el dinero promocional?&lt;/h2&gt;
&lt;p&gt;En nuestro caso, pasadas las 48hs de haber el pago mínimo requerido para la activación del cupón promocional ($175 ARS), nos apareció el crédito de $700 ARS en nuestra cuenta. &lt;/p&gt;
&lt;p&gt;¡OJO! Uno debe ser responsable a la hora de armar las campañas. Lo mejor es darles una fecha de comienzo y una de finalización, contemplando el costo diario, de manera que sepamos de antemano cuánto dinero estamos dispuestos a invertir en publicidad. Para Google AdWords, es suficiente con que hayan hecho click en nuestro anuncio para cargarlo en nuestra cuenta. ¿Es confiable? Podríamos decir que sí. El mismo AdWords te ofrece la posibilidad de analizar desde donde viene el tráfico, y armar estadísticas basado en distintos paramétros. Hay mucho para investigar al respecto, y muchas consideraciones a la hora de armar una campaña.&lt;/p&gt;
&lt;p&gt;Así fue que dimos nuestro primer curso en &lt;a href="https://bitson.group" title="bitson"&gt;bitson&lt;/a&gt;, y que lo publicitamos a través de &lt;a href="https://adwords.google.com/" title="Google AdWords"&gt;Google AdWords&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>adwords</category><category>comunicacion</category><category>google</category><guid>http://blog.bitson.com.ar/posts/empezando-a-usar-google-adwords/</guid><pubDate>Thu, 01 Mar 2018 17:24:36 GMT</pubDate></item><item><title>Evitando las malas prácticas en Python</title><link>http://blog.bitson.com.ar/posts/evitando-las-malas-practicas/</link><dc:creator>Abrunacci</dc:creator><description>&lt;div&gt;&lt;p&gt;Cuando uno empieza a programar en Python suele suceder que incurrimos en errores que son considerados 
"leves" a nivel programación pero que a la hora de inspeccionar nuestro código y ver si cumple con las 
&lt;a href="https://www.fing.edu.uy/inco/cursos/fpr/wiki/index.php/Python_PEP8"&gt;reglas PEP8&lt;/a&gt; nos encontramos con 
la sorpresa de que dudosamente una parte del código escrito logra aprobar el "examen".&lt;/p&gt;
&lt;p&gt;A continuación un breve listado de cosas que podés estar haciendo mal sin saber.   &lt;/p&gt;
&lt;div class="img-with-text" style="text-align:justify; width: 720px;"&gt;
    &lt;img src="https://static.simpsonswiki.com/images/4/46/KnifeSafetyBook.png" alt="10 'SI' y 500 'NO' de la seguridad con las navajas" style="margin:0; display:block;"&gt;
    &lt;p&gt;&lt;code&gt;No niego ni confirmo haber escrito este post solo para utlizar esta imágen.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;em&gt;Real programmers don't use TABs&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;O sí, pero decídanse por uno y sigan siempre con ese. 4 espacios o TABs, pero si vamos variando las indentaciones 
   de nuestros módulos con unos y otros, no estaríamos cumpliendo con las primeras dos reglas de PEP8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;em&gt;Respete los espacios&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Evite dejar espacios en blanco en las siguientes situaciones:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;  - Dentro de paréntesis curvos, llaves, o paréntesis rectos
  - Antes de una coma o punto y coma
  - Antes del paréntesis que abre la lista de argumentos en el llamado a una función
  - Más de un espacio alrededor de una asignación del operador para alinearlo con otro
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;em&gt;79 Máxima&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A la hora de codear en Python debemos tener en cuenta el largo de las líneas ya que, como bien lo dice &lt;a href="http://www.python.org.ar/wiki/PythonZen" title="El Zen de Python"&gt;el zen de python&lt;/a&gt;,
   la legibilidad cuenta.&lt;/p&gt;
&lt;p&gt;Y para que podamos tener código mas legible, PEP8 recomienda que el máximo de caracteres por linea sean 79.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;em&gt;KISS&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep it simple, &lt;del&gt;stupid&lt;/del&gt; Sir.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Las sentencias compuestas (varias instrucciones en la misma línea) son generalmente tomadas como malas prácticas de programación.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aunque a veces está bien poner if/for/while con una pequeña instrucción en la misma línea, no hacer esto para las declaraciones con múltiples instrucciones&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;&lt;em&gt;Usted tiene 1934 actualizaciones pendientes...&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El código debería estar comentado y que esos comentarios no contradigan lo que la función esta haciendo. 
   El código mal comentado es peor que el que no lo está. Procuren mantener actualizados los comentarios para que cualquiera
   que lo lea lo pueda interpretar correctamente y no tenga que adivinar qué es lo que hace cada función.&lt;/p&gt;
&lt;p&gt;Eso es todo por ahora, más adelante subiré otros consejos sobre Python.&lt;/p&gt;
&lt;p&gt;Saludos!&lt;/p&gt;&lt;/div&gt;</description><guid>http://blog.bitson.com.ar/posts/evitando-las-malas-practicas/</guid><pubDate>Thu, 22 Feb 2018 01:57:25 GMT</pubDate></item><item><title>Creando artículos en Nikola</title><link>http://blog.bitson.com.ar/posts/creando-articulos-en-nikola/</link><dc:creator>@nespino</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy les presentamos nuestro primer post recursivo. &lt;/p&gt;
&lt;h3&gt;Cómo crear un artículo para el blog de bitson&lt;/h3&gt;
&lt;p&gt;Ingredientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipenv" title="Repositorio de pipenv"&gt;pipenv&lt;/a&gt; (Para más información ver la guía &lt;a href="http://blog.bitson.group/posts/empezando-con-pipenv/" title="Empezando con pipenv"&gt;Empezando con pipenv&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/" title="Páginas de GitHub"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" title="Guía rápida de Markdown"&gt;Markdown&lt;/a&gt; como lenguaje de marcado &lt;/li&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/" title="Sitio oficial de Nikola"&gt;&lt;img alt="nikola logo" src="http://blog.bitson.com.ar/img/logo_nikola.png" title="Logo de Nikola"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sin más preámbulo, dejo la receta a continuación... &lt;/p&gt;
&lt;h2&gt;Configurando el entorno pipenv&lt;/h2&gt;
&lt;p&gt;Primero, nos aseguramos de tener &lt;a href="https://bryson3gps.wordpress.com/2017/11/08/stop-everything-start-using-pipenv/" title="Cómo instalar pipenv"&gt;pipenv instalado&lt;/a&gt;. Resulta práctico disponer del comando pipenv desde cualquier ruta, por lo que sugerimos agregar la ubicación de la misma a la variable de entorno PATH en el archivo .bashrc (.zshrc, o el que corresponda al shell que usen). Para saber dónde está ubicado pipenv podemos ejecutar el siguiente comando desde la consola:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which pipenv&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/nespino/.local/bin/pipenv&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por lo que la línea de código para agregar pipenv al PATH sería: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;export PATH=$PATH:~/.local/bin&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Clonando nuestro repositorio de GitHub Pages&lt;/h2&gt;
&lt;p&gt;Una vez configurado el entorno pipenv, procedemos a clonar el &lt;a href="https://github.com/bitson/bitson.github.io.git" title="Repositorio del blog de bitson"&gt;repositorio&lt;/a&gt; donde se alojan todas las entradas de nuestro blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git clone https://github.com/bitson/bitson.github.io.git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No necesitamos permisos especiales para clonarlo, pero no podremos subir el nuevo contenido del blog sin estar debidamente autorizado.&lt;/p&gt;
&lt;h3&gt;IMPORTANTE&lt;/h3&gt;
&lt;p&gt;Debemos usar la rama &lt;strong&gt;src&lt;/strong&gt;, en donde tenemos disponible los archivos necesarios para instalar Nikola y todas los artículos del blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git checkout src&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Instalando Nikola&lt;/h2&gt;
&lt;p&gt;Dentro del mismo, en la carpeta &lt;strong&gt;bitblog&lt;/strong&gt; se encuentra el archivo &lt;strong&gt;Pipfile&lt;/strong&gt;, que es el que nos permitirá instalar &lt;a href="https://getnikola.com/" title="Sitio oficial de Nikola"&gt;&lt;strong&gt;Nikola&lt;/strong&gt;&lt;/a&gt; a través del siguiente comando en consola:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv --three install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El parámetro &lt;strong&gt;--three&lt;/strong&gt; indica que vamos a usar la versión 3 de Python. En caso de omitirlo, usaremos la versión que esté configurado por defecto en nuestro sistema. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Es posible las dependencias que tengamos en el sistema choquen con las que están declaradas en el archivo Pipfile.lock. En ese caso, podemos ignorar este archivo durante la instalación usando el comando:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv --three install --skip-lock&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Otra nota:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es posible que el instalador de pipenv nos devuelva la siguiente advertencia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: Your Pipfile requires python_version 3.6, but you are using 3.5.2 (/home/n/./b/bin/python).&lt;/p&gt;
&lt;p&gt;$ pipenv check will surely fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No es algo de qué preocuparse.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Instalación en curso...&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Virtualenv location: /home/nespino/.virtualenvs/bitblog-Dccxvb6W&lt;/p&gt;
&lt;p&gt;Installing dependencies from Pipfile...&lt;/p&gt;
&lt;p&gt;🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 1/1 — 00:01:23&lt;/p&gt;
&lt;p&gt;To activate this project's virtualenv, run the following:&lt;/p&gt;
&lt;p&gt;$ pipenv shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¡Éxito! Sólo nos falta verificar que Nikola esté funcionando correctamente. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv run nikola auto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En mi caso, al ejecutar ese comando recibo un Traceback que termina en&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OSError: [Errno 98] La dirección ya se está usando&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lo que significa que el puerto usado por defecto (8000) está ocupado. Para especificar el puerto a usar basta con agregar &lt;strong&gt;-p &lt;puerto&gt;&lt;/puerto&gt;&lt;/strong&gt; al final del comando. En el ejemplo, usaremos el puerto 8010.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;➜  bitblog git:(src) ✗ pipenv run nikola auto -p 8010&lt;/p&gt;
&lt;p&gt;Scanning posts........done!&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: Watching files for changes...&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: ws4py: Using epoll&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: Serving HTTP on 127.0.0.1 port 8010...&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: ws4py: Managing websocket [Local =&amp;gt; 127.0.0.1:8010 | Remote =&amp;gt; 127.0.0.1:56708]&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &amp;lt;--- {'command': 'hello', 'protocols': ['http://livereload.com/protocols/official-6', 'http://livereload.com/protocols/official-7'], 'snipver': 1, 'ver': '2.2.1'}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: ---&amp;gt; {"command": "hello", "protocols": ["http://livereload.com/protocols/official-7"], "serverName": "nikola-livereload"}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &amp;lt;--- {'command': 'info', 'plugins': {'less': {'version': '1.0', 'disable': False}}, 'url': 'http://localhost:8010/'}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &lt;strong&gt;*&lt;/strong&gt;* Browser connected: http://localhost:8010/&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &lt;strong&gt;*&lt;/strong&gt;* sending 0 pending messages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Voilá!&lt;/h2&gt;
&lt;p&gt;Nikola está listo para ser usado. Para ver el estado actual del blog, ingresar a &lt;a href="http://localhost:8010/" title="8010 o el puerto en el que esté corriendo Nikola"&gt;http://localhost:8010/&lt;/a&gt; y buscar esta misma &lt;a href="http://blog.bitson.group/posts/creando-articulos-en-nikola/" title="Haga clic aquí para sentir el efecto recursivo en tu propias venas"&gt;entrada&lt;/a&gt;. Todo este procedimiento para llegar al tan deseado momento...&lt;/p&gt;
&lt;h2&gt;Creando artículos en Nikola&lt;/h2&gt;
&lt;p&gt;Para crear una nueva entrada en el blog, nos posicionamos en el directorio &lt;strong&gt;bitblog&lt;/strong&gt; y ejecutamos:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv run nikola new_post -f markdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sin desperdiciar un segundo, Nikola nos pedirá un título para el artículo...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating New Post&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: Creando artículos en Nikola&lt;/p&gt;
&lt;p&gt;Scanning posts........done!&lt;/p&gt;
&lt;p&gt;[2018-02-16T19:10:50Z] INFO: new_post: Your post's text is at: posts/creando-articulos-en-nikola.md&lt;/p&gt;
&lt;p&gt;➜  bitblog git:(src) ✗ ls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Con el parámetro &lt;strong&gt;-f markdown&lt;/strong&gt; estamos especificando que el formato de marcado será &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" title="Guía rápida de Markdown"&gt;Markdown&lt;/a&gt;. Si no lo especificamos, Nikola usará por defecto &lt;a href="https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst" title='Guía rápida de reStructuredText). Al día de la fecha, [Nikola soporta](https://getnikola.com/handbook.html#id17 "Lista de lenguajes soportados por Nikola'&gt;reStructuredText&lt;/a&gt; reStructuredText, Markdown, Jupyter (IPython) Notebooks y HTML, entre otras. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; El mismo &lt;a href="https://getnikola.com/blog/" title="Blog de Nikola"&gt;blog de Nikola creado con Nikola&lt;/a&gt; tiene una &lt;a href="https://getnikola.com/blog/markdown-can-affect-performance.html" title="Nota sobre el rendimiento de Markdown"&gt;nota&lt;/a&gt; sobre el rendimiento del Markdown con respecto a otros lenguajes de formateo.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Estamos listos para redactar la publicación...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Your post's text is at: posts/creando-articulos-en-nikola.md&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Abrimos el archivo que Nikola nos generó automáticamente y podemos ver que incluye un encabezado donde principalmente podemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cambiarle fecha y título a la entrada&lt;/li&gt;
&lt;li&gt;Agregarle tags separados por coma y definirle categorías&lt;/li&gt;
&lt;li&gt;Agregar una descripción&lt;/li&gt;
&lt;li&gt;Declarar quién es el autor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para esto último, alcanza con agregar la línea &lt;strong&gt;.. author: @nespino&lt;/strong&gt; al final del encabezado. Lo que debería quedar algo similar a:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;!--&lt;/p&gt;
&lt;p&gt;.. title: Creando artículos en Nikola&lt;/p&gt;
&lt;p&gt;.. slug: creando-articulos-en-nikola&lt;/p&gt;
&lt;p&gt;.. date: 2018-02-16 16:10:50 UTC-03:00&lt;/p&gt;
&lt;p&gt;.. tags: nikola, blog&lt;/p&gt;
&lt;p&gt;.. category: &lt;/p&gt;
&lt;p&gt;.. link: &lt;/p&gt;
&lt;p&gt;.. description: Cómo crear un artículo para el blog de bitson con Nikola&lt;/p&gt;
&lt;p&gt;.. type: text&lt;/p&gt;
&lt;p&gt;.. author: @nespino&lt;/p&gt;
&lt;p&gt;--&amp;gt;&lt;/p&gt;
&lt;p&gt;Escribe tu publicación aquí.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;De acá en adelante es fácil. Escribimos la entrada y guardamos el archivo. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; INFO: auto: Watching files for changes...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nikola nos informa que cada vez que el contenido se modifique, el servidor local intentará reiniciar, reflejando los cambios en el navegador.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Símbolos básicos del markdown&lt;/h2&gt;
&lt;p&gt;Les dejo una síntesis de los elementos de markdown usados para la creación de esta nota:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;_Este renglón fue escrito envuelto entre dos guiones bajos seguidos&lt;/em&gt;&lt;/strong&gt;_ &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Este renglón comienza con cuatro símbolos de mayor (&amp;gt;&amp;gt;&amp;gt;&amp;gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;# Este título empieza con almohadilla (hasthag, símbolo de numeral, ta-te-tí...)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Este renglón está en cursiva&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="explicacion grafica recursiva" src="http://blog.bitson.com.ar/img/explicacion_grafica_recursiva.png" title="Explicación gráfica recursiva"&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; # __no tan importante__ ![recurso] Nosotros somos símbolos libres (estamos escapados)&lt;/p&gt;
&lt;p&gt;Este separador de línea de acá abajo se hace poniendo tres guiones seguidos (---)&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Insertando imágenes&lt;/h2&gt;
&lt;p&gt;Para agregar imágenes a nuestra publicación podemos hacerlo a través de su URL accesible desde internet o bien copiando la imagen a la carpeta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bitblog/files/img/ejemplo.png&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;De esta manera podremos declararla usando el siguiente formato: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[identificador-del-recurso-de-imagen]: /img/ejemplo.png "Título de la imagen"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Esto es, el identificador de la imagen entre corchetes, seguido de dos puntos, la URL de la imagen (que en este caso empieza con / porque saldrá
 de la carpeta files/img/ previamente cargada en nuestro repositorio de GitHub Pages) y entre comillas el título de la imagen, el que aparecerá 
al posicionar el cursor del mouse sobre la misma. &lt;/p&gt;
&lt;p&gt;Una vez que tengamos esta declaración (que no generará nada por pantalla) podremos insertar la imagen cuantas veces queramos, con un ! seguido de
 las palabras alternativas entre corchetes, y pegado al identificador de la imagen entre corchetes, como muestra la siguiente línea:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;![description alt imagen asistencia discapacidad visual yapa optimiza seo][identificador-del-recurso-de-imagen]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Notarán&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Aplicando los cambios&lt;/h2&gt;
&lt;p&gt;Una vez que hayamos terminado de redactar la nota y verifiquemos que se vea correctamente, sólo debemos ejecutar el comando:&lt;/p&gt;
&lt;h2&gt;pipenv run nikola github_deploy&lt;/h2&gt;
&lt;p&gt;lo que subirá los cambios al repositorio en la rama &lt;strong&gt;src&lt;/strong&gt; y GitHub Pages se encargará de mostrarlo en la dirección que tengamos configurada.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[2018-02-19T15:58:09Z] INFO: github_deploy: Successful deployment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;¡Éxito!&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;PD: Hallazgos completamente inútiles aparecidos durante la redacción de la nota&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://guthub.com" title="GitHub mal escrito"&gt;guthub.com&lt;/a&gt; redirecciona a &lt;a href="http://github.com" title="GitHub bien escrito"&gt;github.com&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Animate a ejecutar &lt;strong&gt;pipenv --jumbotron&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>blog</category><category>nikola</category><guid>http://blog.bitson.com.ar/posts/creando-articulos-en-nikola/</guid><pubDate>Fri, 16 Feb 2018 19:10:50 GMT</pubDate></item><item><title>Deployando directamente con git</title><link>http://blog.bitson.com.ar/posts/deployando-directamente-con-git/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy les quiero contar cómo se puede configurar &lt;code&gt;git&lt;/code&gt; para que deployemos
directamente con un &lt;code&gt;push&lt;/code&gt; en nuestro server.&lt;/p&gt;
&lt;h2&gt;Entorno&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que ya tenés tu sitio en un repositorio y que lo que estás
haciendo ahora en tu ciclo de &lt;em&gt;deploy&lt;/em&gt; es algo similar a esto:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hacés tus cambios en tu repo y commiteás a &lt;strong&gt;master&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Te conectás por &lt;code&gt;ssh&lt;/code&gt; a tu server y te parás en el directorio donde tenés tu
   sitio&lt;/li&gt;
&lt;li&gt;Hacés un &lt;code&gt;git pull&lt;/code&gt; para descargar tu nuevo sitio.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Si bien no es algo complejo, puede llegar a ser medio tedioso. Y qué mejor si
se puede hacer un deploy simplemente haciendo &lt;code&gt;git push&lt;/code&gt;, no? xD.&lt;/p&gt;
&lt;h2&gt;Configuración&lt;/h2&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;Vamos a suponer que estás sirviendo tus archivos con un Apache o un Nginx en el
directorio &lt;code&gt;/home/bitson/mi_sitio/&lt;/code&gt;. 
Para poder llevar adelante esta configuración, vamos a separar por un lado los
archivos del sitio y por el otro los archivos del control de versiones.
Necesitamos tener un nuevo repo en &lt;code&gt;/home/bitson/mi_sitio.git&lt;/code&gt;. Para eso nos
conectamos al server por ssh como siempre y ejecutamos:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /home/bitson/mi_sitio.git
&lt;span class="nb"&gt;cd&lt;/span&gt; /home/bitson/mi_sitio.git
git init --bare
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Con el parámetro &lt;code&gt;--bare&lt;/code&gt; le decimos que no vamos a tener los archivos con
código fuente, sólo los archivos &lt;em&gt;internos&lt;/em&gt; de &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Hooks&lt;/h4&gt;
&lt;p&gt;Ahora que tenemos el repositorio creado, tenemos que tener un directorio
&lt;code&gt;hooks&lt;/code&gt;. Ahí dentro vamos a crear un archivo que se llame &lt;code&gt;post-receive&lt;/code&gt; con el
con permisos de ejecución siguiente contenido:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
git --work-tree&lt;span class="o"&gt;=&lt;/span&gt;/home/bitson/mi_sitio --git-dir&lt;span class="o"&gt;=&lt;/span&gt;/home/bitson/mi_sitio.git checkout -f 
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Para darle permisos de ejecución, corré el comando: &lt;code&gt;chmod a+x post-receive&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora cuando hagamos un &lt;code&gt;push&lt;/code&gt; a este repositorio en &lt;code&gt;mi_sitio.git&lt;/code&gt; se va a
ejecutar el &lt;code&gt;hook&lt;/code&gt; que acabamos de crear en &lt;code&gt;post-receive&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Máquina local&lt;/h3&gt;
&lt;p&gt;Ahora lo que tenés que hacer es agregar un repositorio remoto a tu repositorio
local: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git remote add deploy ssh://usuario@tu_dominio.com/home/bitson/mi_sitio.git
&lt;/pre&gt;


&lt;p&gt;Ahora trabajamos localmente y cuando queremos deployar lo que vamos a hacer es:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git push deploy master
&lt;/pre&gt;


&lt;p&gt;Y &lt;em&gt;voilà!&lt;/em&gt; Asunto resuelto.&lt;/p&gt;
&lt;h2&gt;Limpieza&lt;/h2&gt;
&lt;p&gt;Si tu entorno era similar a lo que describimos al principio del artículo, si te
conectás al server, te parás en &lt;code&gt;/home/bitson/mi_sitio&lt;/code&gt; y tirás un &lt;code&gt;git status&lt;/code&gt;
te va a decir que hubo cambios. Porque claramente ese repositorio no sabe que
se actualizó... De hecho ya no necesitás tener ese repositorio porque los
archivos de &lt;code&gt;git&lt;/code&gt; los tenés en &lt;code&gt;/home/bitson/mi_sitio.git&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Así que lo que podés hacer para evitar confusiones es borrar el &lt;code&gt;.git&lt;/code&gt; que
tenés en &lt;code&gt;/home/bitson/mi_sitio&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;rm -rf /home/bitson/mi_sitio/.git
&lt;/pre&gt;


&lt;hr&gt;
&lt;p&gt;Fácil? Dejanos tu comentario&lt;/p&gt;&lt;/div&gt;</description><category>deploy</category><category>devops</category><category>git</category><guid>http://blog.bitson.com.ar/posts/deployando-directamente-con-git/</guid><pubDate>Thu, 08 Feb 2018 01:52:17 GMT</pubDate></item><item><title>Alias &amp; Pretty URL con Nginx</title><link>http://blog.bitson.com.ar/posts/alias-pretty-url-con-nginx/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;En este artículo te voy a contar cómo hacer para publicar en un mismo servidor
diferentes carpetas con archivos estáticos de tu sitio.&lt;/p&gt;
&lt;h2&gt;Primer deploy&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un sitio estático, por ejemplo, el sitio institucional
de &lt;a href="https://bitson.group"&gt;bitson&lt;/a&gt;. Eso lo tenemos en un repo y es un conjunto
de archivos de texto (HTML, js, css y demás) que conforman el sitio.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se le dice &lt;strong&gt;estático&lt;/strong&gt; no porque esté &lt;em&gt;"quieto"&lt;/em&gt; sino porque sólo contiene
archivos de texto y no necesita correr un &lt;em&gt;backend&lt;/em&gt; para funcionar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Supongamos que tenemos los archivos en https://github.com/bitson/sitio1.git
clonamos el repo en el server y tendremos una configuración del Nginx que será
algo similar a:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:80&lt;span class="p"&gt;;&lt;/span&gt;
    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; https://&lt;span class="nv"&gt;$host&lt;/span&gt;/&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:443 ssl&lt;span class="p"&gt;;&lt;/span&gt;

    root /home/bitson/sitio1&lt;span class="p"&gt;;&lt;/span&gt;

    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;/ &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    ssl_certificate         /etc/letsencrypt/live/bitson.group/fullchain.pem&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key     /etc/letsencrypt/live/bitson.group/privkey.pem&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Esta configuración hace que todas las peticiones que lleguen vía HTTP sean
redireccionadas al HTTPS y se sirvan del directorio &lt;code&gt;/home/bitson/sitio1&lt;/code&gt; donde
tenemos clonado el repo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Para los certificados usamos Let's Encrypt y esa es la ruta usual en donde
se guardan en un sistema Debian.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Además en esta configuración vemos una sentencia de &lt;code&gt;try_files&lt;/code&gt; para la
locación de la raíz (&lt;code&gt;/&lt;/code&gt;). Lo que nos quiere decir esto es que cuando alquien
haga una petición a, por ejemplo: &lt;code&gt;bitson.group/saraza&lt;/code&gt; Nginx tiene que buscar
si existe el archivo &lt;code&gt;/home/bitson/sitio1/saraza&lt;/code&gt; o si existe el directorio
&lt;code&gt;/home/bitson/sitio1/saraza/&lt;/code&gt;. En caso de que no exista ninguno entonces el
Nginx responderá con un 404, el código de HTTP que corresponde a &lt;code&gt;Not Found&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Agregando el alias&lt;/h2&gt;
&lt;p&gt;Supongamos ahora que tenemos otro repositorio, por ejemplo,
https://github.com/bitson/presentaciones.git y queremos publicarlo en el mismo
servidor. Algo así como lo que podemos ver en
&lt;a href="https://bitson.group/slides/"&gt;bitson.group/slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para no tener que publicarlo en otro server, podemos aprovechar un alias de
Nginx. Suponiendo que tenemos ese repositorio en el server en
&lt;code&gt;/home/bitson/presentaciones&lt;/code&gt; tenemos que poner una configuración como:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:443 ssl&lt;span class="p"&gt;;&lt;/span&gt;

    root /home/bitson/sitio1&lt;span class="p"&gt;;&lt;/span&gt;

    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;/ &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    location /slides &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;alias&lt;/span&gt; /home/bitson/presentaciones&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    ssl_certificate         /etc/letsencrypt/live/bitson.group/fullchain.pem&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key     /etc/letsencrypt/live/bitson.group/privkey.pem&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Pretty URLs&lt;/h2&gt;
&lt;p&gt;Si queremos omitir tener que poner el &lt;code&gt;.html&lt;/code&gt; en cada una de las URLs a las que
queremos acceder en nuestro sitio. Sólo tenemos que agregar una sentencia de
&lt;code&gt;try_files&lt;/code&gt; en nuestra configuración. Por ejemlo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    location /slides &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;alias&lt;/span&gt; /home/bitson/presentaciones&lt;span class="p"&gt;;&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;.html &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Así, si queremos entrar a &lt;code&gt;https://bitson.group/slides/presentacion1.html&lt;/code&gt;
podremos hacerlo con sólo ir a &lt;code&gt;https://bitson.group/slides/presentacion1&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Espero que les haya gustado! Los leemos en los comentarios!&lt;/p&gt;&lt;/div&gt;</description><category>alias</category><category>deploy</category><category>devops</category><category>nginx</category><guid>http://blog.bitson.com.ar/posts/alias-pretty-url-con-nginx/</guid><pubDate>Thu, 08 Feb 2018 01:24:22 GMT</pubDate></item><item><title>Empezando con Pipenv</title><link>http://blog.bitson.com.ar/posts/empezando-con-pipenv/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;En este brevísimo artículo te explicamos cómo empezar a usar &lt;code&gt;pipenv&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Instalado Pipenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; es una herramienta para manejar paquetes y entornos virtuales de
manera sencilla en tu entorno de desarrollo. Te recomiendo que le eches un ojo
a la &lt;a href="http://pipenv.readthedocs.io/en/latest/"&gt;Documentacion Oficila&lt;/a&gt;.
Ahora te voy a mostrar cómo instalar &lt;code&gt;pipenv&lt;/code&gt; y cómo usarlo en tus proyectos.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.bitson.com.ar/posts/empezando-con-pipenv/"&gt;Leer más…&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>python pipenv virtualenv</category><guid>http://blog.bitson.com.ar/posts/empezando-con-pipenv/</guid><pubDate>Wed, 31 Jan 2018 15:26:18 GMT</pubDate></item></channel></rss>