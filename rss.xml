<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>BITSON's Blog</title><link>http://blog.bitson.com.ar/</link><description>Nuestro Blog...</description><atom:link href="http://blog.bitson.com.ar/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents ¬© 2018 &lt;a href="mailto:info@bitson.com.ar"&gt;Cooperativa de Trabajo BITSON Ltda.&lt;/a&gt; </copyright><lastBuildDate>Mon, 19 Feb 2018 15:57:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creando art√≠culos en Nikola</title><link>http://blog.bitson.com.ar/posts/creando-articulos-en-nikola/</link><dc:creator>@nespino</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy les presentamos nuestro primer post recursivo. &lt;/p&gt;
&lt;h3&gt;C√≥mo crear un art√≠culo para el blog de bitson&lt;/h3&gt;
&lt;p&gt;En esta oportunidad, vamos a hacerlo usando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipenv" title="Repositorio de pipenv"&gt;pipenv&lt;/a&gt; (Para m√°s informaci√≥n ver la gu√≠a &lt;a href="http://blog.bitson.group/posts/empezando-con-pipenv/" title="Empezando con pipenv"&gt;Empezando con pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/" title="P√°ginas de GitHub"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" title="Gu√≠a r√°pida de Markdown"&gt;Markdown&lt;/a&gt; como lenguaje de marcado &lt;/li&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/" title="Sitio oficial de Nikola"&gt;&lt;img alt="nikola logo" src="https://getnikola.com/assets/img/logo.png" title="Logo de Nikola"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sin m√°s pre√°mbulo, dejo la receta a continuaci√≥n... &lt;/p&gt;
&lt;h2&gt;Configurando el entorno pipenv&lt;/h2&gt;
&lt;p&gt;Primero, nos aseguramos de tener &lt;a href="https://bryson3gps.wordpress.com/2017/11/08/stop-everything-start-using-pipenv/" title="C√≥mo instalar pipenv"&gt;pipenv instalado&lt;/a&gt;. Resulta pr√°ctico disponer del comando pipenv desde cualquier ruta, por lo que sugerimos agregar la ubicaci√≥n de la misma a la variable de entorno PATH en el archivo .bashrc (.zshrc, o el que corresponda al shell que usen). Para saber d√≥nde est√° ubicado pipenv podemos ejecutar el siguiente comando desde la consola:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which pipenv&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/nespino/.local/bin/pipenv&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Por lo que la l√≠nea de c√≥digo para agregar pipenv al PATH ser√≠a: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;export PATH=$PATH:~/.local/bin&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Clonando nuestro repositorio de GitHub Pages&lt;/h2&gt;
&lt;p&gt;Una vez configurado el entorno pipenv, procedemos a clonar el &lt;a href="https://github.com/bitson/bitson.github.io.git" title="Repositorio del blog de bitson"&gt;repositorio&lt;/a&gt; donde se alojan todas las entradas de nuestro blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git clone https://github.com/bitson/bitson.github.io.git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No necesitamos permisos especiales para clonarlo, pero no podremos subir el nuevo contenido del blog sin estar debidamente autorizado.&lt;/p&gt;
&lt;h3&gt;IMPORTANTE&lt;/h3&gt;
&lt;p&gt;Debemos usar la rama &lt;strong&gt;src&lt;/strong&gt;, en donde tenemos disponible los archivos necesarios para instalar Nikola y todas los art√≠culos del blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git checkout src&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Instalando Nikola&lt;/h2&gt;
&lt;p&gt;Dentro del mismo, en la carpeta &lt;strong&gt;bitblog&lt;/strong&gt; se encuentra el archivo &lt;strong&gt;Pipfile&lt;/strong&gt;, que es el que nos permitir√° instalar &lt;a href="https://getnikola.com/" title="Sitio oficial de Nikola"&gt;&lt;strong&gt;Nikola&lt;/strong&gt;&lt;/a&gt; a trav√©s del siguiente comando en consola:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv --three install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El par√°metro &lt;strong&gt;--three&lt;/strong&gt; indica que vamos a usar la versi√≥n 3 de Python. En caso de omitirlo, usaremos la versi√≥n que est√© configurado por defecto en nuestro sistema. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Es posible las dependencias que tengamos en el sistema choquen con las que est√°n declaradas en el archivo Pipfile.lock. En ese caso, podemos ignorar este archivo durante la instalaci√≥n usando el comando:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv --three install --skip-lock&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Otra nota:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es posible que el instalador de pipenv nos devuelva la siguiente advertencia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: Your Pipfile requires python_version 3.6, but you are using 3.5.2 (/home/n/./b/bin/python).&lt;/p&gt;
&lt;p&gt;$ pipenv check will surely fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No es algo de qu√© preocuparse.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Instalaci√≥n en curso...&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Virtualenv location: /home/nespino/.virtualenvs/bitblog-Dccxvb6W&lt;/p&gt;
&lt;p&gt;Installing dependencies from Pipfile...&lt;/p&gt;
&lt;p&gt;üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 1/1 ‚Äî 00:01:23&lt;/p&gt;
&lt;p&gt;To activate this project's virtualenv, run the following:&lt;/p&gt;
&lt;p&gt;$ pipenv shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¬°√âxito! S√≥lo nos falta verificar que Nikola est√© funcionando correctamente. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv run nikola auto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En mi caso, al ejecutar ese comando recibo un Traceback que termina en&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OSError: [Errno 98] La direcci√≥n ya se est√° usando&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lo que significa que el puerto usado por defecto (8000) est√° ocupado. Para especificar el puerto a usar basta con agregar &lt;strong&gt;-p &lt;puerto&gt;&lt;/puerto&gt;&lt;/strong&gt; al final del comando. En el ejemplo, usaremos el puerto 8010.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ûú  bitblog git:(src) ‚úó pipenv run nikola auto -p 8010&lt;/p&gt;
&lt;p&gt;Scanning posts........done!&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: Watching files for changes...&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: ws4py: Using epoll&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: Serving HTTP on 127.0.0.1 port 8010...&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: ws4py: Managing websocket [Local =&amp;gt; 127.0.0.1:8010 | Remote =&amp;gt; 127.0.0.1:56708]&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &amp;lt;--- {'command': 'hello', 'protocols': ['http://livereload.com/protocols/official-6', 'http://livereload.com/protocols/official-7'], 'snipver': 1, 'ver': '2.2.1'}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: ---&amp;gt; {"command": "hello", "protocols": ["http://livereload.com/protocols/official-7"], "serverName": "nikola-livereload"}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &amp;lt;--- {'command': 'info', 'plugins': {'less': {'version': '1.0', 'disable': False}}, 'url': 'http://localhost:8010/'}&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &lt;strong&gt;*&lt;/strong&gt;* Browser connected: http://localhost:8010/&lt;/p&gt;
&lt;p&gt;[2018-02-16T20:03:24Z] INFO: auto: &lt;strong&gt;*&lt;/strong&gt;* sending 0 pending messages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Voil√°!&lt;/h2&gt;
&lt;p&gt;Nikola est√° listo para ser usado. Para ver el estado actual del blog, ingresar a &lt;a href="http://localhost:8010/" title="8010 o el puerto en el que est√© corriendo Nikola"&gt;http://localhost:8010/&lt;/a&gt; y buscar esta misma &lt;a href="http://blog.bitson.group/posts/creando-articulos-en-nikola/" title="Haga clic aqu√≠ para sentir el efecto recursivo en tu propias venas"&gt;entrada&lt;/a&gt;. Todo este procedimiento para llegar al tan deseado momento...&lt;/p&gt;
&lt;h2&gt;Creando art√≠culos en Nikola&lt;/h2&gt;
&lt;p&gt;Para crear una nueva entrada en el blog, nos posicionamos en el directorio &lt;strong&gt;bitblog&lt;/strong&gt; y ejecutamos:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipenv run nikola new_post -f markdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sin desperdiciar un segundo, Nikola nos pedir√° un t√≠tulo para el art√≠culo...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating New Post&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: Creando art√≠culos en Nikola&lt;/p&gt;
&lt;p&gt;Scanning posts........done!&lt;/p&gt;
&lt;p&gt;[2018-02-16T19:10:50Z] INFO: new_post: Your post's text is at: posts/creando-articulos-en-nikola.md&lt;/p&gt;
&lt;p&gt;‚ûú  bitblog git:(src) ‚úó ls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Con el par√°metro &lt;strong&gt;-f markdown&lt;/strong&gt; estamos especificando que el formato de marcado ser√° &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" title="Gu√≠a r√°pida de Markdown"&gt;Markdown&lt;/a&gt;. Si no lo especificamos, Nikola usar√° por defecto &lt;a href="https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst" title='Gu√≠a r√°pida de reStructuredText). Al d√≠a de la fecha, [Nikola soporta](https://getnikola.com/handbook.html#id17 "Lista de lenguajes soportados por Nikola'&gt;reStructuredText&lt;/a&gt; reStructuredText, Markdown, Jupyter (IPython) Notebooks y HTML, entre otras. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; El mismo &lt;a href="https://getnikola.com/blog/" title="Blog de Nikola"&gt;blog de Nikola creado con Nikola&lt;/a&gt; tiene una &lt;a href="https://getnikola.com/blog/markdown-can-affect-performance.html" title="Nota sobre el rendimiento de Markdown"&gt;nota&lt;/a&gt; sobre el rendimiento del Markdown con respecto a otros lenguajes de formateo.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Estamos listos para redactar la publicaci√≥n...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Your post's text is at: posts/creando-articulos-en-nikola.md&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Abrimos el archivo que Nikola nos gener√≥ autom√°ticamente y podemos ver que incluye un encabezado donde principalmente podemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cambiarle fecha y t√≠tulo a la entrada&lt;/li&gt;
&lt;li&gt;Agregarle tags separados por coma y definirle categor√≠as&lt;/li&gt;
&lt;li&gt;Agregar una descripci√≥n&lt;/li&gt;
&lt;li&gt;Declarar qui√©n es el autor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para esto √∫ltimo, alcanza con agregar la l√≠nea &lt;strong&gt;.. author: @nespino&lt;/strong&gt; al final del encabezado. Lo que deber√≠a quedar algo similar a:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;!--&lt;/p&gt;
&lt;p&gt;.. title: Creando art√≠culos en Nikola&lt;/p&gt;
&lt;p&gt;.. slug: creando-articulos-en-nikola&lt;/p&gt;
&lt;p&gt;.. date: 2018-02-16 16:10:50 UTC-03:00&lt;/p&gt;
&lt;p&gt;.. tags: nikola, blog&lt;/p&gt;
&lt;p&gt;.. category: &lt;/p&gt;
&lt;p&gt;.. link: &lt;/p&gt;
&lt;p&gt;.. description: C√≥mo crear un art√≠culo para el blog de bitson con Nikola&lt;/p&gt;
&lt;p&gt;.. type: text&lt;/p&gt;
&lt;p&gt;.. author: @nespino&lt;/p&gt;
&lt;p&gt;--&amp;gt;&lt;/p&gt;
&lt;p&gt;Escribe tu publicaci√≥n aqu√≠.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;De ac√° en adelante es f√°cil. Escribimos la entrada y guardamos el archivo. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; INFO: auto: Watching files for changes...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nikola nos informa que cada vez que el contenido se modifique, el servidor local intentar√° reiniciar, reflejando los cambios en el navegador.&lt;/p&gt;
&lt;h2&gt;Aplicando los cambios&lt;/h2&gt;
&lt;p&gt;Una vez que hayamos terminado de redactar la nota y verifiquemos que se vea correctamente, s√≥lo debemos ejecutar el comando:&lt;/p&gt;
&lt;h2&gt;pipenv run nikola github_deploy&lt;/h2&gt;
&lt;p&gt;lo que subir√° los cambios al repositorio en la rama &lt;strong&gt;src&lt;/strong&gt; y GitHub Pages se encargar√° de mostrarlo en la direcci√≥n que tengamos configurada.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PD: &lt;a href="http://guthub.com" title="GitHub mal escrito"&gt;guthub.com&lt;/a&gt; redirecciona a &lt;a href="http://github.com" title="GitHub bien escrito"&gt;github.com&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PD2: pipenv --jumbotron &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>blog</category><category>nikola</category><guid>http://blog.bitson.com.ar/posts/creando-articulos-en-nikola/</guid><pubDate>Fri, 16 Feb 2018 19:10:50 GMT</pubDate></item><item><title>Deployando directamente con git</title><link>http://blog.bitson.com.ar/posts/deployando-directamente-con-git/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy les quiero contar c√≥mo se puede configurar &lt;code&gt;git&lt;/code&gt; para que deployemos
directamente con un &lt;code&gt;push&lt;/code&gt; en nuestro server.&lt;/p&gt;
&lt;h2&gt;Entorno&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que ya ten√©s tu sitio en un repositorio y que lo que est√°s
haciendo ahora en tu ciclo de &lt;em&gt;deploy&lt;/em&gt; es algo similar a esto:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hac√©s tus cambios en tu repo y commite√°s a &lt;strong&gt;master&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Te conect√°s por &lt;code&gt;ssh&lt;/code&gt; a tu server y te par√°s en el directorio donde ten√©s tu
   sitio&lt;/li&gt;
&lt;li&gt;Hac√©s un &lt;code&gt;git pull&lt;/code&gt; para descargar tu nuevo sitio.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Si bien no es algo complejo, puede llegar a ser medio tedioso. Y qu√© mejor si
se puede hacer un deploy simplemente haciendo &lt;code&gt;git push&lt;/code&gt;, no? xD.&lt;/p&gt;
&lt;h2&gt;Configuraci√≥n&lt;/h2&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;Vamos a suponer que est√°s sirviendo tus archivos con un Apache o un Nginx en el
directorio &lt;code&gt;/home/bitson/mi_sitio/&lt;/code&gt;. 
Para poder llevar adelante esta configuraci√≥n, vamos a separar por un lado los
archivos del sitio y por el otro los archivos del control de versiones.
Necesitamos tener un nuevo repo en &lt;code&gt;/home/bitson/mi_sitio.git&lt;/code&gt;. Para eso nos
conectamos al server por ssh como siempre y ejecutamos:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /home/bitson/mi_sitio.git
&lt;span class="nb"&gt;cd&lt;/span&gt; /home/bitson/mi_sitio.git
git init --bare
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Con el par√°metro &lt;code&gt;--bare&lt;/code&gt; le decimos que no vamos a tener los archivos con
c√≥digo fuente, s√≥lo los archivos &lt;em&gt;internos&lt;/em&gt; de &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Hooks&lt;/h4&gt;
&lt;p&gt;Ahora que tenemos el repositorio creado, tenemos que tener un directorio
&lt;code&gt;hooks&lt;/code&gt;. Ah√≠ dentro vamos a crear un archivo que se llame &lt;code&gt;post-receive&lt;/code&gt; con el
con permisos de ejecuci√≥n siguiente contenido:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
git --work-tree&lt;span class="o"&gt;=&lt;/span&gt;/home/bitson/mi_sitio --git-dir&lt;span class="o"&gt;=&lt;/span&gt;/home/bitson/mi_sitio.git checkout -f 
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;Para darle permisos de ejecuci√≥n, corr√© el comando: &lt;code&gt;chmod a+x post-receive&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora cuando hagamos un &lt;code&gt;push&lt;/code&gt; a este repositorio en &lt;code&gt;mi_sitio.git&lt;/code&gt; se va a
ejecutar el &lt;code&gt;hook&lt;/code&gt; que acabamos de crear en &lt;code&gt;post-receive&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;M√°quina local&lt;/h3&gt;
&lt;p&gt;Ahora lo que ten√©s que hacer es agregar un repositorio remoto a tu repositorio
local: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git remote add deploy ssh://usuario@tu_dominio.com/home/bitson/mi_sitio.git
&lt;/pre&gt;


&lt;p&gt;Ahora trabajamos localmente y cuando queremos deployar lo que vamos a hacer es:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git push deploy master
&lt;/pre&gt;


&lt;p&gt;Y &lt;em&gt;voil√†!&lt;/em&gt; Asunto resuelto.&lt;/p&gt;
&lt;h2&gt;Limpieza&lt;/h2&gt;
&lt;p&gt;Si tu entorno era similar a lo que describimos al principio del art√≠culo, si te
conect√°s al server, te par√°s en &lt;code&gt;/home/bitson/mi_sitio&lt;/code&gt; y tir√°s un &lt;code&gt;git status&lt;/code&gt;
te va a decir que hubo cambios. Porque claramente ese repositorio no sabe que
se actualiz√≥... De hecho ya no necesit√°s tener ese repositorio porque los
archivos de &lt;code&gt;git&lt;/code&gt; los ten√©s en &lt;code&gt;/home/bitson/mi_sitio.git&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;As√≠ que lo que pod√©s hacer para evitar confusiones es borrar el &lt;code&gt;.git&lt;/code&gt; que
ten√©s en &lt;code&gt;/home/bitson/mi_sitio&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;rm -rf /home/bitson/mi_sitio/.git
&lt;/pre&gt;


&lt;hr&gt;
&lt;p&gt;F√°cil? Dejanos tu comentario&lt;/p&gt;&lt;/div&gt;</description><category>deploy</category><category>devops</category><category>git</category><guid>http://blog.bitson.com.ar/posts/deployando-directamente-con-git/</guid><pubDate>Thu, 08 Feb 2018 01:52:17 GMT</pubDate></item><item><title>Alias &amp; Pretty URL con Nginx</title><link>http://blog.bitson.com.ar/posts/alias-pretty-url-con-nginx/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;En este art√≠culo te voy a contar c√≥mo hacer para publicar en un mismo servidor
diferentes carpetas con archivos est√°ticos de tu sitio.&lt;/p&gt;
&lt;h2&gt;Primer deploy&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un sitio est√°tico, por ejemplo, el sitio institucional
de &lt;a href="https://bitson.group"&gt;bitson&lt;/a&gt;. Eso lo tenemos en un repo y es un conjunto
de archivos de texto (HTML, js, css y dem√°s) que conforman el sitio.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se le dice &lt;strong&gt;est√°tico&lt;/strong&gt; no porque est√© &lt;em&gt;"quieto"&lt;/em&gt; sino porque s√≥lo contiene
archivos de texto y no necesita correr un &lt;em&gt;backend&lt;/em&gt; para funcionar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Supongamos que tenemos los archivos en https://github.com/bitson/sitio1.git
clonamos el repo en el server y tendremos una configuraci√≥n del Nginx que ser√°
algo similar a:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:80&lt;span class="p"&gt;;&lt;/span&gt;
    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; https://&lt;span class="nv"&gt;$host&lt;/span&gt;/&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:443 ssl&lt;span class="p"&gt;;&lt;/span&gt;

    root /home/bitson/sitio1&lt;span class="p"&gt;;&lt;/span&gt;

    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;/ &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    ssl_certificate         /etc/letsencrypt/live/bitson.group/fullchain.pem&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key     /etc/letsencrypt/live/bitson.group/privkey.pem&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Esta configuraci√≥n hace que todas las peticiones que lleguen v√≠a HTTP sean
redireccionadas al HTTPS y se sirvan del directorio &lt;code&gt;/home/bitson/sitio1&lt;/code&gt; donde
tenemos clonado el repo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Para los certificados usamos Let's Encrypt y esa es la ruta usual en donde
se guardan en un sistema Debian.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adem√°s en esta configuraci√≥n vemos una sentencia de &lt;code&gt;try_files&lt;/code&gt; para la
locaci√≥n de la ra√≠z (&lt;code&gt;/&lt;/code&gt;). Lo que nos quiere decir esto es que cuando alquien
haga una petici√≥n a, por ejemplo: &lt;code&gt;bitson.group/saraza&lt;/code&gt; Nginx tiene que buscar
si existe el archivo &lt;code&gt;/home/bitson/sitio1/saraza&lt;/code&gt; o si existe el directorio
&lt;code&gt;/home/bitson/sitio1/saraza/&lt;/code&gt;. En caso de que no exista ninguno entonces el
Nginx responder√° con un 404, el c√≥digo de HTTP que corresponde a &lt;code&gt;Not Found&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Agregando el alias&lt;/h2&gt;
&lt;p&gt;Supongamos ahora que tenemos otro repositorio, por ejemplo,
https://github.com/bitson/presentaciones.git y queremos publicarlo en el mismo
servidor. Algo as√≠ como lo que podemos ver en
&lt;a href="https://bitson.group/slides/"&gt;bitson.group/slides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para no tener que publicarlo en otro server, podemos aprovechar un alias de
Nginx. Suponiendo que tenemos ese repositorio en el server en
&lt;code&gt;/home/bitson/presentaciones&lt;/code&gt; tenemos que poner una configuraci√≥n como:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:443 ssl&lt;span class="p"&gt;;&lt;/span&gt;

    root /home/bitson/sitio1&lt;span class="p"&gt;;&lt;/span&gt;

    server_name bitson.group www.bitson.group&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;/ &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    location /slides &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;alias&lt;/span&gt; /home/bitson/presentaciones&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    ssl_certificate         /etc/letsencrypt/live/bitson.group/fullchain.pem&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key     /etc/letsencrypt/live/bitson.group/privkey.pem&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Pretty URLs&lt;/h2&gt;
&lt;p&gt;Si queremos omitir tener que poner el &lt;code&gt;.html&lt;/code&gt; en cada una de las URLs a las que
queremos acceder en nuestro sitio. S√≥lo tenemos que agregar una sentencia de
&lt;code&gt;try_files&lt;/code&gt; en nuestra configuraci√≥n. Por ejemlo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    location /slides &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;alias&lt;/span&gt; /home/bitson/presentaciones&lt;span class="p"&gt;;&lt;/span&gt;
        try_files &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;.html &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;As√≠, si queremos entrar a &lt;code&gt;https://bitson.group/slides/presentacion1.html&lt;/code&gt;
podremos hacerlo con s√≥lo ir a &lt;code&gt;https://bitson.group/slides/presentacion1&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Espero que les haya gustado! Los leemos en los comentarios!&lt;/p&gt;&lt;/div&gt;</description><category>alias</category><category>deploy</category><category>devops</category><category>nginx</category><guid>http://blog.bitson.com.ar/posts/alias-pretty-url-con-nginx/</guid><pubDate>Thu, 08 Feb 2018 01:24:22 GMT</pubDate></item><item><title>Empezando con Pipenv</title><link>http://blog.bitson.com.ar/posts/empezando-con-pipenv/</link><dc:creator>lecovi</dc:creator><description>&lt;div&gt;&lt;p&gt;En este brev√≠simo art√≠culo te explicamos c√≥mo empezar a usar &lt;code&gt;pipenv&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Instalado Pipenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; es una herramienta para manejar paquetes y entornos virtuales de
manera sencilla en tu entorno de desarrollo. Te recomiendo que le eches un ojo
a la &lt;a href="http://pipenv.readthedocs.io/en/latest/"&gt;Documentacion Oficila&lt;/a&gt;.
Ahora te voy a mostrar c√≥mo instalar &lt;code&gt;pipenv&lt;/code&gt; y c√≥mo usarlo en tus proyectos.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.bitson.com.ar/posts/empezando-con-pipenv/"&gt;Leer m√°s‚Ä¶&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>python pipenv virtualenv</category><guid>http://blog.bitson.com.ar/posts/empezando-con-pipenv/</guid><pubDate>Wed, 31 Jan 2018 15:26:18 GMT</pubDate></item></channel></rss>